apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wp-wordpress
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql-container
          image: mysql:8
          imagePullPolicy: IfNotPresent     
          ports:
            - containerPort: 3306
        #  resources:
        #    limits:
        #      memory: '1Gi'
        #      cpu: '1'
          volumeMounts:
            - name: mysql-init
              mountPath: /docker-entrypoint-initdb.d
            - name: mysql-data
              mountPath: /var/lib/mysql
          env:
            - name: MYSQL_DATABASE
              value: wordpress
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: wp-secrets
                  key: MYSQL_ROOT_PASSWORD                
      volumes:
        - name: mysql-init
          configMap:
            name: mysql-wp-config
        - name: mysql-data   
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-wp-config
  namespace: wp-wordpress
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS wordpress;
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wp-wordpress
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
  
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wp-wordpress
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: wp-storageclass
  resources:
    requests:
      storage: 1Gi 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wp-wordpress
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: wp-storageclass
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Secret
metadata: 
  name: wp-secrets
  namespace: wp-wordpress
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: YTlqWGt4cXhLOE1XY0NMQzN4c2UzRg==
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: wp-storageclass
  namespace: wp-wordpress
provisioner: kubernetes.io/azure-disk
parameters:
  storageaccounttype: Standard_LRS
  kind: managed
reclaimPolicy: Retain
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wp-wordpress
  labels:
    app: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress-container
          image: wordpress:latest
          imagePullPolicy: IfNotPresent         
          ports:
            - containerPort: 80
    #      resources:
     #       limits:
      #        memory: '1Gi'
      #        cpu: '1'
          volumeMounts:
            - name: wordpress-data
              mountPath: /var/www/html/wp-content
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql-service:3306
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: wp-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: WORDPRESS_DB_USER
              value: root
            - name: WORDPRESS_DB_NAME
              value: wordpress      
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "-c", "chown -R www-data:www-data /var/www; chmod -R 774 /var/www"]                       
      volumes:
        - name: wordpress-data
          persistentVolumeClaim:
            claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wp-wordpress
spec:
  selector:
    app: wordpress
  ports:
    - protocol: TCP
      port: 80
  type: LoadBalancer
